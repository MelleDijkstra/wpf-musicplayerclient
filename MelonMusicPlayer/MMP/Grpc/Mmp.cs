// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mmp.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Grpc {

  /// <summary>Holder for reflection information generated from mmp.proto</summary>
  public static partial class MmpReflection {

    #region Descriptor
    /// <summary>File descriptor for mmp.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MmpReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgltbXAucHJvdG8SBGdycGMiRQoEU29uZxIKCgJpZBgBIAEoAxIQCghhbGJ1",
            "bV9pZBgCIAEoAxINCgV0aXRsZRgDIAEoCRIQCghkdXJhdGlvbhgEIAEoAyJQ",
            "CgVBbGJ1bRIKCgJpZBgBIAEoAxINCgV0aXRsZRgCIAEoCRIdCglzb25nX2xp",
            "c3QYAyADKAsyCi5ncnBjLlNvbmcSDQoFY292ZXIYBCABKAwiNgoJTWVkaWFE",
            "YXRhEh0KBHR5cGUYASABKA4yDy5ncnBjLk1lZGlhVHlwZRIKCgJpZBgCIAEo",
            "AyISChBNTVBTdGF0dXNSZXF1ZXN0InAKDE1lZGlhQ29udHJvbBInCgVzdGF0",
            "ZRgBIAEoDjIYLmdycGMuTWVkaWFDb250cm9sLlN0YXRlEg8KB3NvbmdfaWQY",
            "AiABKAMiJgoFU3RhdGUSCAoEUExBWRAAEgkKBVBBVVNFEAESCAoEU1RPUBAC",
            "IhEKD1BsYXliYWNrQ29udHJvbCIzCg1Wb2x1bWVDb250cm9sEgwKBG11dGUY",
            "ASABKAgSFAoMdm9sdW1lX2xldmVsGAIgASgRIiMKD1Bvc2l0aW9uQ29udHJv",
            "bBIQCghwb3NpdGlvbhgBIAEoBSJNCglBbGJ1bUxpc3QSHwoKYWxidW1fbGlz",
            "dBgBIAMoCzILLmdycGMuQWxidW0SHwoEaW5mbxgCIAEoCzIRLmdycGMuTU1Q",
            "UmVzcG9uc2UiXAoIU29uZ0xpc3QSEAoIYWxidW1faWQYASABKAUSHQoJc29u",
            "Z19saXN0GAIgAygLMgouZ3JwYy5Tb25nEh8KBGluZm8YAyABKAsyES5ncnBj",
            "Lk1NUFJlc3BvbnNlIvgBCglNTVBTdGF0dXMSJAoFc3RhdGUYASABKA4yFS5n",
            "cnBjLk1NUFN0YXR1cy5TdGF0ZRIgCgxjdXJyZW50X3NvbmcYAiABKAsyCi5n",
            "cnBjLlNvbmcSEAoIcG9zaXRpb24YAyABKAMSDgoGdm9sdW1lGAQgASgFEgwK",
            "BG11dGUYBSABKAgicwoFU3RhdGUSDQoJQlVGRkVSSU5HEAASCwoHUExBWUlO",
            "RxABEgkKBUVOREVEEAISCQoFRVJST1IQAxISCg5OT1RISU5HU1BFQ0lBTBAE",
            "EgsKB09QRU5JTkcQBRIKCgZQQVVTRUQQBhILCgdTVE9QUEVEEAciKwoKUmVu",
            "YW1lRGF0YRIKCgJpZBgCIAEoAxIRCgluZXdfdGl0bGUYAyABKAkiLQoITW92",
            "ZURhdGESDwoHc29uZ19pZBgBIAEoAxIQCghhbGJ1bV9pZBgCIAEoAyIRCg9N",
            "RFN0YXR1c1JlcXVlc3QiNAoNTWVkaWFEb3dubG9hZBIRCgltZWRpYV91cmwY",
            "ASABKAkSEAoIYWxidW1faWQYAiABKAMiLgoORG93bmxvYWRTdGF0dXMSCgoC",
            "aWQYASABKAMSEAoIcHJvZ3Jlc3MYAiABKAUiMwoITURTdGF0dXMSJwoJZG93",
            "bmxvYWRzGAEgAygLMhQuZ3JwYy5Eb3dubG9hZFN0YXR1cyJ0CgtNTVBSZXNw",
            "b25zZRIoCgZyZXN1bHQYASABKA4yGC5ncnBjLk1NUFJlc3BvbnNlLlJlc3Vs",
            "dBIPCgdtZXNzYWdlGAIgASgJEg0KBWVycm9yGAMgASgJIhsKBlJlc3VsdBIG",
            "CgJPSxAAEgkKBUVSUk9SEAEqIAoJTWVkaWFUeXBlEgkKBUFMQlVNEAASCAoE",
            "U09ORxABMuMECgtNdXNpY1BsYXllchI1ChFSZXRyaWV2ZUFsYnVtTGlzdBIP",
            "LmdycGMuTWVkaWFEYXRhGg8uZ3JwYy5BbGJ1bUxpc3QSMwoQUmV0cmlldmVT",
            "b25nTGlzdBIPLmdycGMuTWVkaWFEYXRhGg4uZ3JwYy5Tb25nTGlzdBItCgRQ",
            "bGF5EhIuZ3JwYy5NZWRpYUNvbnRyb2waES5ncnBjLk1NUFJlc3BvbnNlEjYK",
            "DENoYW5nZVZvbHVtZRITLmdycGMuVm9sdW1lQ29udHJvbBoRLmdycGMuTU1Q",
            "UmVzcG9uc2USOgoOQ2hhbmdlUG9zaXRpb24SFS5ncnBjLlBvc2l0aW9uQ29u",
            "dHJvbBoRLmdycGMuTU1QUmVzcG9uc2USNAoIUHJldmlvdXMSFS5ncnBjLlBs",
            "YXliYWNrQ29udHJvbBoRLmdycGMuTU1QUmVzcG9uc2USMAoETmV4dBIVLmdy",
            "cGMuUGxheWJhY2tDb250cm9sGhEuZ3JwYy5NTVBSZXNwb25zZRItCgdBZGRO",
            "ZXh0Eg8uZ3JwYy5NZWRpYURhdGEaES5ncnBjLk1NUFJlc3BvbnNlEjAKCkFk",
            "ZFRvUXVldWUSDy5ncnBjLk1lZGlhRGF0YRoRLmdycGMuTU1QUmVzcG9uc2US",
            "PAoRUmV0cmlldmVNTVBTdGF0dXMSFi5ncnBjLk1NUFN0YXR1c1JlcXVlc3Qa",
            "Dy5ncnBjLk1NUFN0YXR1cxI+ChFSZWdpc3Rlck1NUE5vdGlmeRIWLmdycGMu",
            "TU1QU3RhdHVzUmVxdWVzdBoPLmdycGMuTU1QU3RhdHVzMAEyiAIKC0RhdGFN",
            "YW5hZ2VyEjEKC0RlbGV0ZUFsYnVtEg8uZ3JwYy5NZWRpYURhdGEaES5ncnBj",
            "Lk1NUFJlc3BvbnNlEjAKCkRlbGV0ZVNvbmcSDy5ncnBjLk1lZGlhRGF0YRoR",
            "LmdycGMuTU1QUmVzcG9uc2USMgoLUmVuYW1lQWxidW0SEC5ncnBjLlJlbmFt",
            "ZURhdGEaES5ncnBjLk1NUFJlc3BvbnNlEjEKClJlbmFtZVNvbmcSEC5ncnBj",
            "LlJlbmFtZURhdGEaES5ncnBjLk1NUFJlc3BvbnNlEi0KCE1vdmVTb25nEg4u",
            "Z3JwYy5Nb3ZlRGF0YRoRLmdycGMuTU1QUmVzcG9uc2UywwEKD01lZGlhRG93",
            "bmxvYWRlchI6Cg1Eb3dubG9hZE1lZGlhEhMuZ3JwYy5NZWRpYURvd25sb2Fk",
            "GhQuZ3JwYy5Eb3dubG9hZFN0YXR1cxI5ChBSZXRyaWV2ZU1EU3RhdHVzEhUu",
            "Z3JwYy5NRFN0YXR1c1JlcXVlc3QaDi5ncnBjLk1EU3RhdHVzEjkKDk5vdGlm",
            "eU1EU3RhdHVzEhUuZ3JwYy5NRFN0YXR1c1JlcXVlc3QaDi5ncnBjLk1EU3Rh",
            "dHVzMAFCPAonbmwubWVsbGVkaWprc3RyYS5tdXNpY3BsYXllcmNsaWVudC5n",
            "cnBjQg9NZWxvbk11c2ljUHJvdG9QAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Grpc.MediaType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.Song), global::Grpc.Song.Parser, new[]{ "Id", "AlbumId", "Title", "Duration" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.Album), global::Grpc.Album.Parser, new[]{ "Id", "Title", "SongList", "Cover" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.MediaData), global::Grpc.MediaData.Parser, new[]{ "Type", "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.MMPStatusRequest), global::Grpc.MMPStatusRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.MediaControl), global::Grpc.MediaControl.Parser, new[]{ "State", "SongId" }, null, new[]{ typeof(global::Grpc.MediaControl.Types.State) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.PlaybackControl), global::Grpc.PlaybackControl.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.VolumeControl), global::Grpc.VolumeControl.Parser, new[]{ "Mute", "VolumeLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.PositionControl), global::Grpc.PositionControl.Parser, new[]{ "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.AlbumList), global::Grpc.AlbumList.Parser, new[]{ "AlbumList_", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.SongList), global::Grpc.SongList.Parser, new[]{ "AlbumId", "SongList_", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.MMPStatus), global::Grpc.MMPStatus.Parser, new[]{ "State", "CurrentSong", "Position", "Volume", "Mute" }, null, new[]{ typeof(global::Grpc.MMPStatus.Types.State) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.RenameData), global::Grpc.RenameData.Parser, new[]{ "Id", "NewTitle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.MoveData), global::Grpc.MoveData.Parser, new[]{ "SongId", "AlbumId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.MDStatusRequest), global::Grpc.MDStatusRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.MediaDownload), global::Grpc.MediaDownload.Parser, new[]{ "MediaUrl", "AlbumId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.DownloadStatus), global::Grpc.DownloadStatus.Parser, new[]{ "Id", "Progress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.MDStatus), global::Grpc.MDStatus.Parser, new[]{ "Downloads" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.MMPResponse), global::Grpc.MMPResponse.Parser, new[]{ "Result", "Message", "Error" }, null, new[]{ typeof(global::Grpc.MMPResponse.Types.Result) }, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MediaType {
    [pbr::OriginalName("ALBUM")] Album = 0,
    [pbr::OriginalName("SONG")] Song = 1,
  }

  #endregion

  #region Messages
  public sealed partial class Song : pb::IMessage<Song> {
    private static readonly pb::MessageParser<Song> _parser = new pb::MessageParser<Song>(() => new Song());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Song> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.MmpReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Song() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Song(Song other) : this() {
      id_ = other.id_;
      albumId_ = other.albumId_;
      title_ = other.title_;
      duration_ = other.duration_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Song Clone() {
      return new Song(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "album_id" field.</summary>
    public const int AlbumIdFieldNumber = 2;
    private long albumId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AlbumId {
      get { return albumId_; }
      set {
        albumId_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 3;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 4;
    private long duration_;
    /// <summary>
    /// duration in seconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Song);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Song other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (AlbumId != other.AlbumId) return false;
      if (Title != other.Title) return false;
      if (Duration != other.Duration) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (AlbumId != 0L) hash ^= AlbumId.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Duration != 0L) hash ^= Duration.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (AlbumId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(AlbumId);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Title);
      }
      if (Duration != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Duration);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (AlbumId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AlbumId);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Duration != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Duration);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Song other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.AlbumId != 0L) {
        AlbumId = other.AlbumId;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Duration != 0L) {
        Duration = other.Duration;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            AlbumId = input.ReadInt64();
            break;
          }
          case 26: {
            Title = input.ReadString();
            break;
          }
          case 32: {
            Duration = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Album : pb::IMessage<Album> {
    private static readonly pb::MessageParser<Album> _parser = new pb::MessageParser<Album>(() => new Album());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Album> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.MmpReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Album() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Album(Album other) : this() {
      id_ = other.id_;
      title_ = other.title_;
      songList_ = other.songList_.Clone();
      cover_ = other.cover_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Album Clone() {
      return new Album(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 2;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "song_list" field.</summary>
    public const int SongListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Grpc.Song> _repeated_songList_codec
        = pb::FieldCodec.ForMessage(26, global::Grpc.Song.Parser);
    private readonly pbc::RepeatedField<global::Grpc.Song> songList_ = new pbc::RepeatedField<global::Grpc.Song>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grpc.Song> SongList {
      get { return songList_; }
    }

    /// <summary>Field number for the "cover" field.</summary>
    public const int CoverFieldNumber = 4;
    private pb::ByteString cover_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Cover {
      get { return cover_; }
      set {
        cover_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Album);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Album other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Title != other.Title) return false;
      if(!songList_.Equals(other.songList_)) return false;
      if (Cover != other.Cover) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      hash ^= songList_.GetHashCode();
      if (Cover.Length != 0) hash ^= Cover.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      songList_.WriteTo(output, _repeated_songList_codec);
      if (Cover.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Cover);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      size += songList_.CalculateSize(_repeated_songList_codec);
      if (Cover.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Cover);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Album other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      songList_.Add(other.songList_);
      if (other.Cover.Length != 0) {
        Cover = other.Cover;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 26: {
            songList_.AddEntriesFrom(input, _repeated_songList_codec);
            break;
          }
          case 34: {
            Cover = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Abstract message which just uses an ID
  /// </summary>
  public sealed partial class MediaData : pb::IMessage<MediaData> {
    private static readonly pb::MessageParser<MediaData> _parser = new pb::MessageParser<MediaData>(() => new MediaData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MediaData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.MmpReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MediaData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MediaData(MediaData other) : this() {
      type_ = other.type_;
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MediaData Clone() {
      return new MediaData(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Grpc.MediaType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.MediaType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MediaData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MediaData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Id != 0L) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Id != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MediaData other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Grpc.MediaType) input.ReadEnum();
            break;
          }
          case 16: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MMPStatusRequest : pb::IMessage<MMPStatusRequest> {
    private static readonly pb::MessageParser<MMPStatusRequest> _parser = new pb::MessageParser<MMPStatusRequest>(() => new MMPStatusRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MMPStatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.MmpReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MMPStatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MMPStatusRequest(MMPStatusRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MMPStatusRequest Clone() {
      return new MMPStatusRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MMPStatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MMPStatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MMPStatusRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class MediaControl : pb::IMessage<MediaControl> {
    private static readonly pb::MessageParser<MediaControl> _parser = new pb::MessageParser<MediaControl>(() => new MediaControl());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MediaControl> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.MmpReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MediaControl() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MediaControl(MediaControl other) : this() {
      state_ = other.state_;
      songId_ = other.songId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MediaControl Clone() {
      return new MediaControl(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::Grpc.MediaControl.Types.State state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.MediaControl.Types.State State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "song_id" field.</summary>
    public const int SongIdFieldNumber = 2;
    private long songId_;
    /// <summary>
    /// Song ID is only used with play state
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SongId {
      get { return songId_; }
      set {
        songId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MediaControl);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MediaControl other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (SongId != other.SongId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != 0) hash ^= State.GetHashCode();
      if (SongId != 0L) hash ^= SongId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if (SongId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SongId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (SongId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SongId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MediaControl other) {
      if (other == null) {
        return;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.SongId != 0L) {
        SongId = other.SongId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            state_ = (global::Grpc.MediaControl.Types.State) input.ReadEnum();
            break;
          }
          case 16: {
            SongId = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MediaControl message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum State {
        [pbr::OriginalName("PLAY")] Play = 0,
        [pbr::OriginalName("PAUSE")] Pause = 1,
        [pbr::OriginalName("STOP")] Stop = 2,
      }

    }
    #endregion

  }

  public sealed partial class PlaybackControl : pb::IMessage<PlaybackControl> {
    private static readonly pb::MessageParser<PlaybackControl> _parser = new pb::MessageParser<PlaybackControl>(() => new PlaybackControl());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlaybackControl> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.MmpReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaybackControl() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaybackControl(PlaybackControl other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaybackControl Clone() {
      return new PlaybackControl(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlaybackControl);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlaybackControl other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlaybackControl other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class VolumeControl : pb::IMessage<VolumeControl> {
    private static readonly pb::MessageParser<VolumeControl> _parser = new pb::MessageParser<VolumeControl>(() => new VolumeControl());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VolumeControl> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.MmpReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolumeControl() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolumeControl(VolumeControl other) : this() {
      mute_ = other.mute_;
      volumeLevel_ = other.volumeLevel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VolumeControl Clone() {
      return new VolumeControl(this);
    }

    /// <summary>Field number for the "mute" field.</summary>
    public const int MuteFieldNumber = 1;
    private bool mute_;
    /// <summary>
    /// mute (1) or unmute (0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Mute {
      get { return mute_; }
      set {
        mute_ = value;
      }
    }

    /// <summary>Field number for the "volume_level" field.</summary>
    public const int VolumeLevelFieldNumber = 2;
    private int volumeLevel_;
    /// <summary>
    /// amount to increase or reduce the volume
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VolumeLevel {
      get { return volumeLevel_; }
      set {
        volumeLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VolumeControl);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VolumeControl other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mute != other.Mute) return false;
      if (VolumeLevel != other.VolumeLevel) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mute != false) hash ^= Mute.GetHashCode();
      if (VolumeLevel != 0) hash ^= VolumeLevel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mute != false) {
        output.WriteRawTag(8);
        output.WriteBool(Mute);
      }
      if (VolumeLevel != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(VolumeLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mute != false) {
        size += 1 + 1;
      }
      if (VolumeLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(VolumeLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VolumeControl other) {
      if (other == null) {
        return;
      }
      if (other.Mute != false) {
        Mute = other.Mute;
      }
      if (other.VolumeLevel != 0) {
        VolumeLevel = other.VolumeLevel;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Mute = input.ReadBool();
            break;
          }
          case 16: {
            VolumeLevel = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PositionControl : pb::IMessage<PositionControl> {
    private static readonly pb::MessageParser<PositionControl> _parser = new pb::MessageParser<PositionControl>(() => new PositionControl());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PositionControl> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.MmpReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PositionControl() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PositionControl(PositionControl other) : this() {
      position_ = other.position_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PositionControl Clone() {
      return new PositionControl(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private int position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PositionControl);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PositionControl other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Position != other.Position) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Position != 0) hash ^= Position.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Position != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PositionControl other) {
      if (other == null) {
        return;
      }
      if (other.Position != 0) {
        Position = other.Position;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Position = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AlbumList : pb::IMessage<AlbumList> {
    private static readonly pb::MessageParser<AlbumList> _parser = new pb::MessageParser<AlbumList>(() => new AlbumList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AlbumList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.MmpReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlbumList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlbumList(AlbumList other) : this() {
      albumList_ = other.albumList_.Clone();
      Info = other.info_ != null ? other.Info.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlbumList Clone() {
      return new AlbumList(this);
    }

    /// <summary>Field number for the "album_list" field.</summary>
    public const int AlbumList_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Grpc.Album> _repeated_albumList_codec
        = pb::FieldCodec.ForMessage(10, global::Grpc.Album.Parser);
    private readonly pbc::RepeatedField<global::Grpc.Album> albumList_ = new pbc::RepeatedField<global::Grpc.Album>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grpc.Album> AlbumList_ {
      get { return albumList_; }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private global::Grpc.MMPResponse info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.MMPResponse Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AlbumList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AlbumList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!albumList_.Equals(other.albumList_)) return false;
      if (!object.Equals(Info, other.Info)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= albumList_.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      albumList_.WriteTo(output, _repeated_albumList_codec);
      if (info_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += albumList_.CalculateSize(_repeated_albumList_codec);
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AlbumList other) {
      if (other == null) {
        return;
      }
      albumList_.Add(other.albumList_);
      if (other.info_ != null) {
        if (info_ == null) {
          info_ = new global::Grpc.MMPResponse();
        }
        Info.MergeFrom(other.Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            albumList_.AddEntriesFrom(input, _repeated_albumList_codec);
            break;
          }
          case 18: {
            if (info_ == null) {
              info_ = new global::Grpc.MMPResponse();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SongList : pb::IMessage<SongList> {
    private static readonly pb::MessageParser<SongList> _parser = new pb::MessageParser<SongList>(() => new SongList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SongList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.MmpReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SongList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SongList(SongList other) : this() {
      albumId_ = other.albumId_;
      songList_ = other.songList_.Clone();
      Info = other.info_ != null ? other.Info.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SongList Clone() {
      return new SongList(this);
    }

    /// <summary>Field number for the "album_id" field.</summary>
    public const int AlbumIdFieldNumber = 1;
    private int albumId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AlbumId {
      get { return albumId_; }
      set {
        albumId_ = value;
      }
    }

    /// <summary>Field number for the "song_list" field.</summary>
    public const int SongList_FieldNumber = 2;
    private static readonly pb::FieldCodec<global::Grpc.Song> _repeated_songList_codec
        = pb::FieldCodec.ForMessage(18, global::Grpc.Song.Parser);
    private readonly pbc::RepeatedField<global::Grpc.Song> songList_ = new pbc::RepeatedField<global::Grpc.Song>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grpc.Song> SongList_ {
      get { return songList_; }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 3;
    private global::Grpc.MMPResponse info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.MMPResponse Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SongList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SongList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AlbumId != other.AlbumId) return false;
      if(!songList_.Equals(other.songList_)) return false;
      if (!object.Equals(Info, other.Info)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AlbumId != 0) hash ^= AlbumId.GetHashCode();
      hash ^= songList_.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AlbumId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AlbumId);
      }
      songList_.WriteTo(output, _repeated_songList_codec);
      if (info_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AlbumId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AlbumId);
      }
      size += songList_.CalculateSize(_repeated_songList_codec);
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SongList other) {
      if (other == null) {
        return;
      }
      if (other.AlbumId != 0) {
        AlbumId = other.AlbumId;
      }
      songList_.Add(other.songList_);
      if (other.info_ != null) {
        if (info_ == null) {
          info_ = new global::Grpc.MMPResponse();
        }
        Info.MergeFrom(other.Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AlbumId = input.ReadInt32();
            break;
          }
          case 18: {
            songList_.AddEntriesFrom(input, _repeated_songList_codec);
            break;
          }
          case 26: {
            if (info_ == null) {
              info_ = new global::Grpc.MMPResponse();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Status information
  /// </summary>
  public sealed partial class MMPStatus : pb::IMessage<MMPStatus> {
    private static readonly pb::MessageParser<MMPStatus> _parser = new pb::MessageParser<MMPStatus>(() => new MMPStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MMPStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.MmpReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MMPStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MMPStatus(MMPStatus other) : this() {
      state_ = other.state_;
      CurrentSong = other.currentSong_ != null ? other.CurrentSong.Clone() : null;
      position_ = other.position_;
      volume_ = other.volume_;
      mute_ = other.mute_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MMPStatus Clone() {
      return new MMPStatus(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::Grpc.MMPStatus.Types.State state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.MMPStatus.Types.State State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "current_song" field.</summary>
    public const int CurrentSongFieldNumber = 2;
    private global::Grpc.Song currentSong_;
    /// <summary>
    /// song id of currently playing song
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.Song CurrentSong {
      get { return currentSong_; }
      set {
        currentSong_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private long position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 4;
    private int volume_;
    /// <summary>
    /// current volume level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "mute" field.</summary>
    public const int MuteFieldNumber = 5;
    private bool mute_;
    /// <summary>
    /// 1 if muted, if not 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Mute {
      get { return mute_; }
      set {
        mute_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MMPStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MMPStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (!object.Equals(CurrentSong, other.CurrentSong)) return false;
      if (Position != other.Position) return false;
      if (Volume != other.Volume) return false;
      if (Mute != other.Mute) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != 0) hash ^= State.GetHashCode();
      if (currentSong_ != null) hash ^= CurrentSong.GetHashCode();
      if (Position != 0L) hash ^= Position.GetHashCode();
      if (Volume != 0) hash ^= Volume.GetHashCode();
      if (Mute != false) hash ^= Mute.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if (currentSong_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CurrentSong);
      }
      if (Position != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Position);
      }
      if (Volume != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Volume);
      }
      if (Mute != false) {
        output.WriteRawTag(40);
        output.WriteBool(Mute);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (currentSong_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentSong);
      }
      if (Position != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Position);
      }
      if (Volume != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Volume);
      }
      if (Mute != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MMPStatus other) {
      if (other == null) {
        return;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.currentSong_ != null) {
        if (currentSong_ == null) {
          currentSong_ = new global::Grpc.Song();
        }
        CurrentSong.MergeFrom(other.CurrentSong);
      }
      if (other.Position != 0L) {
        Position = other.Position;
      }
      if (other.Volume != 0) {
        Volume = other.Volume;
      }
      if (other.Mute != false) {
        Mute = other.Mute;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            state_ = (global::Grpc.MMPStatus.Types.State) input.ReadEnum();
            break;
          }
          case 18: {
            if (currentSong_ == null) {
              currentSong_ = new global::Grpc.Song();
            }
            input.ReadMessage(currentSong_);
            break;
          }
          case 24: {
            Position = input.ReadInt64();
            break;
          }
          case 32: {
            Volume = input.ReadInt32();
            break;
          }
          case 40: {
            Mute = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MMPStatus message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// States of VLC player
      /// </summary>
      public enum State {
        [pbr::OriginalName("BUFFERING")] Buffering = 0,
        [pbr::OriginalName("PLAYING")] Playing = 1,
        [pbr::OriginalName("ENDED")] Ended = 2,
        [pbr::OriginalName("ERROR")] Error = 3,
        [pbr::OriginalName("NOTHINGSPECIAL")] Nothingspecial = 4,
        [pbr::OriginalName("OPENING")] Opening = 5,
        [pbr::OriginalName("PAUSED")] Paused = 6,
        [pbr::OriginalName("STOPPED")] Stopped = 7,
      }

    }
    #endregion

  }

  /// <summary>
  /// Rename album or song
  /// </summary>
  public sealed partial class RenameData : pb::IMessage<RenameData> {
    private static readonly pb::MessageParser<RenameData> _parser = new pb::MessageParser<RenameData>(() => new RenameData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RenameData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.MmpReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenameData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenameData(RenameData other) : this() {
      id_ = other.id_;
      newTitle_ = other.newTitle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenameData Clone() {
      return new RenameData(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "new_title" field.</summary>
    public const int NewTitleFieldNumber = 3;
    private string newTitle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NewTitle {
      get { return newTitle_; }
      set {
        newTitle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RenameData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RenameData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (NewTitle != other.NewTitle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (NewTitle.Length != 0) hash ^= NewTitle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Id);
      }
      if (NewTitle.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NewTitle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (NewTitle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NewTitle);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RenameData other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.NewTitle.Length != 0) {
        NewTitle = other.NewTitle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Id = input.ReadInt64();
            break;
          }
          case 26: {
            NewTitle = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Move song from one album to another
  /// </summary>
  public sealed partial class MoveData : pb::IMessage<MoveData> {
    private static readonly pb::MessageParser<MoveData> _parser = new pb::MessageParser<MoveData>(() => new MoveData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.MmpReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveData(MoveData other) : this() {
      songId_ = other.songId_;
      albumId_ = other.albumId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveData Clone() {
      return new MoveData(this);
    }

    /// <summary>Field number for the "song_id" field.</summary>
    public const int SongIdFieldNumber = 1;
    private long songId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SongId {
      get { return songId_; }
      set {
        songId_ = value;
      }
    }

    /// <summary>Field number for the "album_id" field.</summary>
    public const int AlbumIdFieldNumber = 2;
    private long albumId_;
    /// <summary>
    /// ID of the new album
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AlbumId {
      get { return albumId_; }
      set {
        albumId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SongId != other.SongId) return false;
      if (AlbumId != other.AlbumId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SongId != 0L) hash ^= SongId.GetHashCode();
      if (AlbumId != 0L) hash ^= AlbumId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SongId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SongId);
      }
      if (AlbumId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(AlbumId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SongId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SongId);
      }
      if (AlbumId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AlbumId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveData other) {
      if (other == null) {
        return;
      }
      if (other.SongId != 0L) {
        SongId = other.SongId;
      }
      if (other.AlbumId != 0L) {
        AlbumId = other.AlbumId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SongId = input.ReadInt64();
            break;
          }
          case 16: {
            AlbumId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MDStatusRequest : pb::IMessage<MDStatusRequest> {
    private static readonly pb::MessageParser<MDStatusRequest> _parser = new pb::MessageParser<MDStatusRequest>(() => new MDStatusRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MDStatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.MmpReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MDStatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MDStatusRequest(MDStatusRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MDStatusRequest Clone() {
      return new MDStatusRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MDStatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MDStatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MDStatusRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class MediaDownload : pb::IMessage<MediaDownload> {
    private static readonly pb::MessageParser<MediaDownload> _parser = new pb::MessageParser<MediaDownload>(() => new MediaDownload());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MediaDownload> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.MmpReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MediaDownload() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MediaDownload(MediaDownload other) : this() {
      mediaUrl_ = other.mediaUrl_;
      albumId_ = other.albumId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MediaDownload Clone() {
      return new MediaDownload(this);
    }

    /// <summary>Field number for the "media_url" field.</summary>
    public const int MediaUrlFieldNumber = 1;
    private string mediaUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MediaUrl {
      get { return mediaUrl_; }
      set {
        mediaUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "album_id" field.</summary>
    public const int AlbumIdFieldNumber = 2;
    private long albumId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AlbumId {
      get { return albumId_; }
      set {
        albumId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MediaDownload);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MediaDownload other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MediaUrl != other.MediaUrl) return false;
      if (AlbumId != other.AlbumId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MediaUrl.Length != 0) hash ^= MediaUrl.GetHashCode();
      if (AlbumId != 0L) hash ^= AlbumId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MediaUrl.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MediaUrl);
      }
      if (AlbumId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(AlbumId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MediaUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MediaUrl);
      }
      if (AlbumId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AlbumId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MediaDownload other) {
      if (other == null) {
        return;
      }
      if (other.MediaUrl.Length != 0) {
        MediaUrl = other.MediaUrl;
      }
      if (other.AlbumId != 0L) {
        AlbumId = other.AlbumId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MediaUrl = input.ReadString();
            break;
          }
          case 16: {
            AlbumId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DownloadStatus : pb::IMessage<DownloadStatus> {
    private static readonly pb::MessageParser<DownloadStatus> _parser = new pb::MessageParser<DownloadStatus>(() => new DownloadStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DownloadStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.MmpReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DownloadStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DownloadStatus(DownloadStatus other) : this() {
      id_ = other.id_;
      progress_ = other.progress_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DownloadStatus Clone() {
      return new DownloadStatus(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "progress" field.</summary>
    public const int ProgressFieldNumber = 2;
    private int progress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DownloadStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DownloadStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Progress != other.Progress) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Progress != 0) hash ^= Progress.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Progress != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Progress);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Progress != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Progress);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DownloadStatus other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Progress != 0) {
        Progress = other.Progress;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            Progress = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MDStatus : pb::IMessage<MDStatus> {
    private static readonly pb::MessageParser<MDStatus> _parser = new pb::MessageParser<MDStatus>(() => new MDStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MDStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.MmpReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MDStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MDStatus(MDStatus other) : this() {
      downloads_ = other.downloads_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MDStatus Clone() {
      return new MDStatus(this);
    }

    /// <summary>Field number for the "downloads" field.</summary>
    public const int DownloadsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Grpc.DownloadStatus> _repeated_downloads_codec
        = pb::FieldCodec.ForMessage(10, global::Grpc.DownloadStatus.Parser);
    private readonly pbc::RepeatedField<global::Grpc.DownloadStatus> downloads_ = new pbc::RepeatedField<global::Grpc.DownloadStatus>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grpc.DownloadStatus> Downloads {
      get { return downloads_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MDStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MDStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!downloads_.Equals(other.downloads_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= downloads_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      downloads_.WriteTo(output, _repeated_downloads_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += downloads_.CalculateSize(_repeated_downloads_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MDStatus other) {
      if (other == null) {
        return;
      }
      downloads_.Add(other.downloads_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            downloads_.AddEntriesFrom(input, _repeated_downloads_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Generic server response
  /// </summary>
  public sealed partial class MMPResponse : pb::IMessage<MMPResponse> {
    private static readonly pb::MessageParser<MMPResponse> _parser = new pb::MessageParser<MMPResponse>(() => new MMPResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MMPResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.MmpReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MMPResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MMPResponse(MMPResponse other) : this() {
      result_ = other.result_;
      message_ = other.message_;
      error_ = other.error_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MMPResponse Clone() {
      return new MMPResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::Grpc.MMPResponse.Types.Result result_ = 0;
    /// <summary>
    /// result type to check if action was correctly executed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.MMPResponse.Types.Result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    /// <summary>
    /// message which can be displayed to user
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 3;
    private string error_ = "";
    /// <summary>
    /// error message with more in-depth info about what happened, use this as developer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MMPResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MMPResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (Message != other.Message) return false;
      if (Error != other.Error) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MMPResponse other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            result_ = (global::Grpc.MMPResponse.Types.Result) input.ReadEnum();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 26: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MMPResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// different types of results from the server
      /// </summary>
      public enum Result {
        [pbr::OriginalName("OK")] Ok = 0,
        [pbr::OriginalName("ERROR")] Error = 1,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
