// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mmp.proto
// </auto-generated>
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Grpc {
  public static partial class MusicPlayer
  {
    static readonly string __ServiceName = "grpc.MusicPlayer";

    static readonly grpc::Marshaller<global::Grpc.MediaData> __Marshaller_MediaData = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpc.MediaData.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpc.AlbumList> __Marshaller_AlbumList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpc.AlbumList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpc.SongList> __Marshaller_SongList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpc.SongList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpc.MediaControl> __Marshaller_MediaControl = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpc.MediaControl.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpc.MMPResponse> __Marshaller_MMPResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpc.MMPResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpc.VolumeControl> __Marshaller_VolumeControl = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpc.VolumeControl.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpc.PositionControl> __Marshaller_PositionControl = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpc.PositionControl.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpc.PlaybackControl> __Marshaller_PlaybackControl = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpc.PlaybackControl.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpc.MMPStatusRequest> __Marshaller_MMPStatusRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpc.MMPStatusRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpc.MMPStatus> __Marshaller_MMPStatus = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpc.MMPStatus.Parser.ParseFrom);

    static readonly grpc::Method<global::Grpc.MediaData, global::Grpc.AlbumList> __Method_RetrieveAlbumList = new grpc::Method<global::Grpc.MediaData, global::Grpc.AlbumList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RetrieveAlbumList",
        __Marshaller_MediaData,
        __Marshaller_AlbumList);

    static readonly grpc::Method<global::Grpc.MediaData, global::Grpc.SongList> __Method_RetrieveSongList = new grpc::Method<global::Grpc.MediaData, global::Grpc.SongList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RetrieveSongList",
        __Marshaller_MediaData,
        __Marshaller_SongList);

    static readonly grpc::Method<global::Grpc.MediaControl, global::Grpc.MMPResponse> __Method_Play = new grpc::Method<global::Grpc.MediaControl, global::Grpc.MMPResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Play",
        __Marshaller_MediaControl,
        __Marshaller_MMPResponse);

    static readonly grpc::Method<global::Grpc.VolumeControl, global::Grpc.MMPResponse> __Method_ChangeVolume = new grpc::Method<global::Grpc.VolumeControl, global::Grpc.MMPResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ChangeVolume",
        __Marshaller_VolumeControl,
        __Marshaller_MMPResponse);

    static readonly grpc::Method<global::Grpc.PositionControl, global::Grpc.MMPResponse> __Method_ChangePosition = new grpc::Method<global::Grpc.PositionControl, global::Grpc.MMPResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ChangePosition",
        __Marshaller_PositionControl,
        __Marshaller_MMPResponse);

    static readonly grpc::Method<global::Grpc.PlaybackControl, global::Grpc.MMPResponse> __Method_Previous = new grpc::Method<global::Grpc.PlaybackControl, global::Grpc.MMPResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Previous",
        __Marshaller_PlaybackControl,
        __Marshaller_MMPResponse);

    static readonly grpc::Method<global::Grpc.PlaybackControl, global::Grpc.MMPResponse> __Method_Next = new grpc::Method<global::Grpc.PlaybackControl, global::Grpc.MMPResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Next",
        __Marshaller_PlaybackControl,
        __Marshaller_MMPResponse);

    static readonly grpc::Method<global::Grpc.MediaData, global::Grpc.MMPResponse> __Method_AddNext = new grpc::Method<global::Grpc.MediaData, global::Grpc.MMPResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddNext",
        __Marshaller_MediaData,
        __Marshaller_MMPResponse);

    static readonly grpc::Method<global::Grpc.MediaData, global::Grpc.MMPResponse> __Method_AddToQueue = new grpc::Method<global::Grpc.MediaData, global::Grpc.MMPResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddToQueue",
        __Marshaller_MediaData,
        __Marshaller_MMPResponse);

    static readonly grpc::Method<global::Grpc.MMPStatusRequest, global::Grpc.MMPStatus> __Method_RetrieveMMPStatus = new grpc::Method<global::Grpc.MMPStatusRequest, global::Grpc.MMPStatus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RetrieveMMPStatus",
        __Marshaller_MMPStatusRequest,
        __Marshaller_MMPStatus);

    static readonly grpc::Method<global::Grpc.MMPStatusRequest, global::Grpc.MMPStatus> __Method_RegisterMMPNotify = new grpc::Method<global::Grpc.MMPStatusRequest, global::Grpc.MMPStatus>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "RegisterMMPNotify",
        __Marshaller_MMPStatusRequest,
        __Marshaller_MMPStatus);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Grpc.MmpReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MusicPlayer</summary>
    public abstract partial class MusicPlayerBase
    {
      /// <summary>
      ///
      /// Media Player rpc calls
      ///
      /// Retrieve a list of data, (eg. albums, songs)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grpc.AlbumList> RetrieveAlbumList(global::Grpc.MediaData request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Grpc.SongList> RetrieveSongList(global::Grpc.MediaData request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Playback
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grpc.MMPResponse> Play(global::Grpc.MediaControl request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Grpc.MMPResponse> ChangeVolume(global::Grpc.VolumeControl request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Grpc.MMPResponse> ChangePosition(global::Grpc.PositionControl request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Queue manipulation
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grpc.MMPResponse> Previous(global::Grpc.PlaybackControl request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Grpc.MMPResponse> Next(global::Grpc.PlaybackControl request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Grpc.MMPResponse> AddNext(global::Grpc.MediaData request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Grpc.MMPResponse> AddToQueue(global::Grpc.MediaData request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Grpc.MMPStatus> RetrieveMMPStatus(global::Grpc.MMPStatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// special register RPC call, clients can make this request (register) and keep receiving updates (when available)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task RegisterMMPNotify(global::Grpc.MMPStatusRequest request, grpc::IServerStreamWriter<global::Grpc.MMPStatus> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MusicPlayer</summary>
    public partial class MusicPlayerClient : grpc::ClientBase<MusicPlayerClient>
    {
      /// <summary>Creates a new client for MusicPlayer</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MusicPlayerClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MusicPlayer that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MusicPlayerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MusicPlayerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MusicPlayerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///
      /// Media Player rpc calls
      ///
      /// Retrieve a list of data, (eg. albums, songs)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpc.AlbumList RetrieveAlbumList(global::Grpc.MediaData request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RetrieveAlbumList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Media Player rpc calls
      ///
      /// Retrieve a list of data, (eg. albums, songs)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpc.AlbumList RetrieveAlbumList(global::Grpc.MediaData request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RetrieveAlbumList, null, options, request);
      }
      /// <summary>
      ///
      /// Media Player rpc calls
      ///
      /// Retrieve a list of data, (eg. albums, songs)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpc.AlbumList> RetrieveAlbumListAsync(global::Grpc.MediaData request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RetrieveAlbumListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Media Player rpc calls
      ///
      /// Retrieve a list of data, (eg. albums, songs)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpc.AlbumList> RetrieveAlbumListAsync(global::Grpc.MediaData request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RetrieveAlbumList, null, options, request);
      }
      public virtual global::Grpc.SongList RetrieveSongList(global::Grpc.MediaData request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RetrieveSongList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Grpc.SongList RetrieveSongList(global::Grpc.MediaData request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RetrieveSongList, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Grpc.SongList> RetrieveSongListAsync(global::Grpc.MediaData request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RetrieveSongListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Grpc.SongList> RetrieveSongListAsync(global::Grpc.MediaData request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RetrieveSongList, null, options, request);
      }
      /// <summary>
      /// Playback
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpc.MMPResponse Play(global::Grpc.MediaControl request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Play(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Playback
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpc.MMPResponse Play(global::Grpc.MediaControl request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Play, null, options, request);
      }
      /// <summary>
      /// Playback
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpc.MMPResponse> PlayAsync(global::Grpc.MediaControl request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return PlayAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Playback
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpc.MMPResponse> PlayAsync(global::Grpc.MediaControl request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Play, null, options, request);
      }
      public virtual global::Grpc.MMPResponse ChangeVolume(global::Grpc.VolumeControl request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ChangeVolume(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Grpc.MMPResponse ChangeVolume(global::Grpc.VolumeControl request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ChangeVolume, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Grpc.MMPResponse> ChangeVolumeAsync(global::Grpc.VolumeControl request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ChangeVolumeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Grpc.MMPResponse> ChangeVolumeAsync(global::Grpc.VolumeControl request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ChangeVolume, null, options, request);
      }
      public virtual global::Grpc.MMPResponse ChangePosition(global::Grpc.PositionControl request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ChangePosition(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Grpc.MMPResponse ChangePosition(global::Grpc.PositionControl request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ChangePosition, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Grpc.MMPResponse> ChangePositionAsync(global::Grpc.PositionControl request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ChangePositionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Grpc.MMPResponse> ChangePositionAsync(global::Grpc.PositionControl request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ChangePosition, null, options, request);
      }
      /// <summary>
      /// Queue manipulation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpc.MMPResponse Previous(global::Grpc.PlaybackControl request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Previous(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Queue manipulation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpc.MMPResponse Previous(global::Grpc.PlaybackControl request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Previous, null, options, request);
      }
      /// <summary>
      /// Queue manipulation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpc.MMPResponse> PreviousAsync(global::Grpc.PlaybackControl request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return PreviousAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Queue manipulation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpc.MMPResponse> PreviousAsync(global::Grpc.PlaybackControl request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Previous, null, options, request);
      }
      public virtual global::Grpc.MMPResponse Next(global::Grpc.PlaybackControl request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Next(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Grpc.MMPResponse Next(global::Grpc.PlaybackControl request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Next, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Grpc.MMPResponse> NextAsync(global::Grpc.PlaybackControl request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return NextAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Grpc.MMPResponse> NextAsync(global::Grpc.PlaybackControl request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Next, null, options, request);
      }
      public virtual global::Grpc.MMPResponse AddNext(global::Grpc.MediaData request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddNext(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Grpc.MMPResponse AddNext(global::Grpc.MediaData request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddNext, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Grpc.MMPResponse> AddNextAsync(global::Grpc.MediaData request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddNextAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Grpc.MMPResponse> AddNextAsync(global::Grpc.MediaData request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddNext, null, options, request);
      }
      public virtual global::Grpc.MMPResponse AddToQueue(global::Grpc.MediaData request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddToQueue(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Grpc.MMPResponse AddToQueue(global::Grpc.MediaData request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddToQueue, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Grpc.MMPResponse> AddToQueueAsync(global::Grpc.MediaData request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddToQueueAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Grpc.MMPResponse> AddToQueueAsync(global::Grpc.MediaData request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddToQueue, null, options, request);
      }
      public virtual global::Grpc.MMPStatus RetrieveMMPStatus(global::Grpc.MMPStatusRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RetrieveMMPStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Grpc.MMPStatus RetrieveMMPStatus(global::Grpc.MMPStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RetrieveMMPStatus, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Grpc.MMPStatus> RetrieveMMPStatusAsync(global::Grpc.MMPStatusRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RetrieveMMPStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Grpc.MMPStatus> RetrieveMMPStatusAsync(global::Grpc.MMPStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RetrieveMMPStatus, null, options, request);
      }
      /// <summary>
      /// special register RPC call, clients can make this request (register) and keep receiving updates (when available)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Grpc.MMPStatus> RegisterMMPNotify(global::Grpc.MMPStatusRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RegisterMMPNotify(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// special register RPC call, clients can make this request (register) and keep receiving updates (when available)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Grpc.MMPStatus> RegisterMMPNotify(global::Grpc.MMPStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_RegisterMMPNotify, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MusicPlayerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MusicPlayerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MusicPlayerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_RetrieveAlbumList, serviceImpl.RetrieveAlbumList)
          .AddMethod(__Method_RetrieveSongList, serviceImpl.RetrieveSongList)
          .AddMethod(__Method_Play, serviceImpl.Play)
          .AddMethod(__Method_ChangeVolume, serviceImpl.ChangeVolume)
          .AddMethod(__Method_ChangePosition, serviceImpl.ChangePosition)
          .AddMethod(__Method_Previous, serviceImpl.Previous)
          .AddMethod(__Method_Next, serviceImpl.Next)
          .AddMethod(__Method_AddNext, serviceImpl.AddNext)
          .AddMethod(__Method_AddToQueue, serviceImpl.AddToQueue)
          .AddMethod(__Method_RetrieveMMPStatus, serviceImpl.RetrieveMMPStatus)
          .AddMethod(__Method_RegisterMMPNotify, serviceImpl.RegisterMMPNotify).Build();
    }

  }
  public static partial class DataManager
  {
    static readonly string __ServiceName = "grpc.DataManager";

    static readonly grpc::Marshaller<global::Grpc.MediaData> __Marshaller_MediaData = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpc.MediaData.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpc.MMPResponse> __Marshaller_MMPResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpc.MMPResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpc.RenameData> __Marshaller_RenameData = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpc.RenameData.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpc.MoveData> __Marshaller_MoveData = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpc.MoveData.Parser.ParseFrom);

    static readonly grpc::Method<global::Grpc.MediaData, global::Grpc.MMPResponse> __Method_DeleteAlbum = new grpc::Method<global::Grpc.MediaData, global::Grpc.MMPResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAlbum",
        __Marshaller_MediaData,
        __Marshaller_MMPResponse);

    static readonly grpc::Method<global::Grpc.MediaData, global::Grpc.MMPResponse> __Method_DeleteSong = new grpc::Method<global::Grpc.MediaData, global::Grpc.MMPResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteSong",
        __Marshaller_MediaData,
        __Marshaller_MMPResponse);

    static readonly grpc::Method<global::Grpc.RenameData, global::Grpc.MMPResponse> __Method_RenameAlbum = new grpc::Method<global::Grpc.RenameData, global::Grpc.MMPResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RenameAlbum",
        __Marshaller_RenameData,
        __Marshaller_MMPResponse);

    static readonly grpc::Method<global::Grpc.RenameData, global::Grpc.MMPResponse> __Method_RenameSong = new grpc::Method<global::Grpc.RenameData, global::Grpc.MMPResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RenameSong",
        __Marshaller_RenameData,
        __Marshaller_MMPResponse);

    static readonly grpc::Method<global::Grpc.MoveData, global::Grpc.MMPResponse> __Method_MoveSong = new grpc::Method<global::Grpc.MoveData, global::Grpc.MMPResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MoveSong",
        __Marshaller_MoveData,
        __Marshaller_MMPResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Grpc.MmpReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of DataManager</summary>
    public abstract partial class DataManagerBase
    {
      /// <summary>
      ///
      /// Data Management RPC calls
      ///
      /// TODO: DeleteAlbum, DeleteSong and RenameAlbum, RenameSong can merged to single call
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grpc.MMPResponse> DeleteAlbum(global::Grpc.MediaData request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Grpc.MMPResponse> DeleteSong(global::Grpc.MediaData request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Grpc.MMPResponse> RenameAlbum(global::Grpc.RenameData request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Grpc.MMPResponse> RenameSong(global::Grpc.RenameData request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Grpc.MMPResponse> MoveSong(global::Grpc.MoveData request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DataManager</summary>
    public partial class DataManagerClient : grpc::ClientBase<DataManagerClient>
    {
      /// <summary>Creates a new client for DataManager</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DataManagerClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DataManager that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DataManagerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DataManagerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DataManagerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///
      /// Data Management RPC calls
      ///
      /// TODO: DeleteAlbum, DeleteSong and RenameAlbum, RenameSong can merged to single call
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpc.MMPResponse DeleteAlbum(global::Grpc.MediaData request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteAlbum(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Data Management RPC calls
      ///
      /// TODO: DeleteAlbum, DeleteSong and RenameAlbum, RenameSong can merged to single call
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpc.MMPResponse DeleteAlbum(global::Grpc.MediaData request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAlbum, null, options, request);
      }
      /// <summary>
      ///
      /// Data Management RPC calls
      ///
      /// TODO: DeleteAlbum, DeleteSong and RenameAlbum, RenameSong can merged to single call
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpc.MMPResponse> DeleteAlbumAsync(global::Grpc.MediaData request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteAlbumAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Data Management RPC calls
      ///
      /// TODO: DeleteAlbum, DeleteSong and RenameAlbum, RenameSong can merged to single call
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpc.MMPResponse> DeleteAlbumAsync(global::Grpc.MediaData request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAlbum, null, options, request);
      }
      public virtual global::Grpc.MMPResponse DeleteSong(global::Grpc.MediaData request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteSong(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Grpc.MMPResponse DeleteSong(global::Grpc.MediaData request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteSong, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Grpc.MMPResponse> DeleteSongAsync(global::Grpc.MediaData request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteSongAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Grpc.MMPResponse> DeleteSongAsync(global::Grpc.MediaData request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteSong, null, options, request);
      }
      public virtual global::Grpc.MMPResponse RenameAlbum(global::Grpc.RenameData request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RenameAlbum(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Grpc.MMPResponse RenameAlbum(global::Grpc.RenameData request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RenameAlbum, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Grpc.MMPResponse> RenameAlbumAsync(global::Grpc.RenameData request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RenameAlbumAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Grpc.MMPResponse> RenameAlbumAsync(global::Grpc.RenameData request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RenameAlbum, null, options, request);
      }
      public virtual global::Grpc.MMPResponse RenameSong(global::Grpc.RenameData request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RenameSong(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Grpc.MMPResponse RenameSong(global::Grpc.RenameData request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RenameSong, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Grpc.MMPResponse> RenameSongAsync(global::Grpc.RenameData request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RenameSongAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Grpc.MMPResponse> RenameSongAsync(global::Grpc.RenameData request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RenameSong, null, options, request);
      }
      public virtual global::Grpc.MMPResponse MoveSong(global::Grpc.MoveData request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return MoveSong(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Grpc.MMPResponse MoveSong(global::Grpc.MoveData request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MoveSong, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Grpc.MMPResponse> MoveSongAsync(global::Grpc.MoveData request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return MoveSongAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Grpc.MMPResponse> MoveSongAsync(global::Grpc.MoveData request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MoveSong, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override DataManagerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DataManagerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DataManagerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_DeleteAlbum, serviceImpl.DeleteAlbum)
          .AddMethod(__Method_DeleteSong, serviceImpl.DeleteSong)
          .AddMethod(__Method_RenameAlbum, serviceImpl.RenameAlbum)
          .AddMethod(__Method_RenameSong, serviceImpl.RenameSong)
          .AddMethod(__Method_MoveSong, serviceImpl.MoveSong).Build();
    }

  }
  public static partial class MediaDownloader
  {
    static readonly string __ServiceName = "grpc.MediaDownloader";

    static readonly grpc::Marshaller<global::Grpc.MediaDownload> __Marshaller_MediaDownload = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpc.MediaDownload.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpc.DownloadStatus> __Marshaller_DownloadStatus = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpc.DownloadStatus.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpc.MDStatusRequest> __Marshaller_MDStatusRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpc.MDStatusRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Grpc.MDStatus> __Marshaller_MDStatus = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Grpc.MDStatus.Parser.ParseFrom);

    static readonly grpc::Method<global::Grpc.MediaDownload, global::Grpc.DownloadStatus> __Method_DownloadMedia = new grpc::Method<global::Grpc.MediaDownload, global::Grpc.DownloadStatus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DownloadMedia",
        __Marshaller_MediaDownload,
        __Marshaller_DownloadStatus);

    static readonly grpc::Method<global::Grpc.MDStatusRequest, global::Grpc.MDStatus> __Method_RetrieveMDStatus = new grpc::Method<global::Grpc.MDStatusRequest, global::Grpc.MDStatus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RetrieveMDStatus",
        __Marshaller_MDStatusRequest,
        __Marshaller_MDStatus);

    static readonly grpc::Method<global::Grpc.MDStatusRequest, global::Grpc.MDStatus> __Method_NotifyMDStatus = new grpc::Method<global::Grpc.MDStatusRequest, global::Grpc.MDStatus>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "NotifyMDStatus",
        __Marshaller_MDStatusRequest,
        __Marshaller_MDStatus);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Grpc.MmpReflection.Descriptor.Services[2]; }
    }

    /// <summary>Base class for server-side implementations of MediaDownloader</summary>
    public abstract partial class MediaDownloaderBase
    {
      /// <summary>
      ///
      /// Media Downloader RPC Calls
      ///
      /// This call downloads the specified media
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grpc.DownloadStatus> DownloadMedia(global::Grpc.MediaDownload request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get the status of the downloader
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Grpc.MDStatus> RetrieveMDStatus(global::Grpc.MDStatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// special register RPC call, clients can make this request (register) and keep receiving updates (when available)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task NotifyMDStatus(global::Grpc.MDStatusRequest request, grpc::IServerStreamWriter<global::Grpc.MDStatus> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MediaDownloader</summary>
    public partial class MediaDownloaderClient : grpc::ClientBase<MediaDownloaderClient>
    {
      /// <summary>Creates a new client for MediaDownloader</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MediaDownloaderClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MediaDownloader that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MediaDownloaderClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MediaDownloaderClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MediaDownloaderClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///
      /// Media Downloader RPC Calls
      ///
      /// This call downloads the specified media
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpc.DownloadStatus DownloadMedia(global::Grpc.MediaDownload request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DownloadMedia(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Media Downloader RPC Calls
      ///
      /// This call downloads the specified media
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpc.DownloadStatus DownloadMedia(global::Grpc.MediaDownload request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DownloadMedia, null, options, request);
      }
      /// <summary>
      ///
      /// Media Downloader RPC Calls
      ///
      /// This call downloads the specified media
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpc.DownloadStatus> DownloadMediaAsync(global::Grpc.MediaDownload request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DownloadMediaAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Media Downloader RPC Calls
      ///
      /// This call downloads the specified media
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpc.DownloadStatus> DownloadMediaAsync(global::Grpc.MediaDownload request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DownloadMedia, null, options, request);
      }
      /// <summary>
      /// Get the status of the downloader
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpc.MDStatus RetrieveMDStatus(global::Grpc.MDStatusRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RetrieveMDStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the status of the downloader
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Grpc.MDStatus RetrieveMDStatus(global::Grpc.MDStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RetrieveMDStatus, null, options, request);
      }
      /// <summary>
      /// Get the status of the downloader
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpc.MDStatus> RetrieveMDStatusAsync(global::Grpc.MDStatusRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RetrieveMDStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the status of the downloader
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Grpc.MDStatus> RetrieveMDStatusAsync(global::Grpc.MDStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RetrieveMDStatus, null, options, request);
      }
      /// <summary>
      /// special register RPC call, clients can make this request (register) and keep receiving updates (when available)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Grpc.MDStatus> NotifyMDStatus(global::Grpc.MDStatusRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return NotifyMDStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// special register RPC call, clients can make this request (register) and keep receiving updates (when available)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Grpc.MDStatus> NotifyMDStatus(global::Grpc.MDStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_NotifyMDStatus, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MediaDownloaderClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MediaDownloaderClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MediaDownloaderBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_DownloadMedia, serviceImpl.DownloadMedia)
          .AddMethod(__Method_RetrieveMDStatus, serviceImpl.RetrieveMDStatus)
          .AddMethod(__Method_NotifyMDStatus, serviceImpl.NotifyMDStatus).Build();
    }

  }
}
#endregion
